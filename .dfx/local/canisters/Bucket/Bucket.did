type Result_1 = 
 variant {
   err: DataErr;
   ok: blob;
 };
type Result = 
 variant {
   err: DataErr;
   ok: AssetExt;
 };
type PUT = 
 record {
   chunk: Chunk;
   chunk_number: nat;
   chunk_order: nat;
   file_extension: text;
   file_key: text;
   file_name: text;
   total_size: nat;
 };
type GET = 
 record {
   file_key: text;
   flag: nat;
 };
type DataErr = 
 variant {
   BlobSizeError;
   FileKeyErr;
   FlagErr;
   MemoryInsufficient;
 };
type Chunk = 
 record {
   data: blob;
   digest: vec nat8;
 };
type AssetExt = 
 record {
   bucket_id: principal;
   file_extension: text;
   file_key: text;
   file_name: text;
   need_query_times: nat;
   total_size: nat;
   upload_status: bool;
 };
service : {
  get: (GET) -> (Result_1) query;
  put: (PUT, principal) -> (Result);
}
